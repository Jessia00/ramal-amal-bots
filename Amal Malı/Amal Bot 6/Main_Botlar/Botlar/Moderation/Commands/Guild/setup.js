const { Ramalcim } = require("../../../../Helpers/Schemas")
class Setup extends Command {
    constructor(client) {
        super(client, {
            name: "setup",
            aliases: ["sunucu"],
            Founder: true,
        });
    }
    async run(client, message, args, embed) {
        const ramal = await Ramalcim.findOne({ guildID: message.guild.id })
        if (!args[0]) { 
        const row = new Discord.MessageActionRow().addComponents(new Discord.MessageSelectMenu().setCustomId('select').setPlaceholder('Kurumları Gör!').setCustomId('select').addOptions([{ label: "Yapılan Kurumlar!", description: "Tüm Kurulumları Bitirmeden Tıklamayınız.", value: `${message.guild.name}` }]));
        let kurulum = await message.channel.send({
            components: [row], embeds:
                [embed.setDescription(`\`\`\`Sunucu Bilgileri\`\`\`Sunucu ID: **${message.guild.id}**\nSunucu İsim: **${message.guild.name}**\nSunucu Tag :**${ramal.tags ? ramal.tags.map(t => `${t}`).join(',') : `${emojis.iptal}`}**\nSunucu Sembolü: **${ramal.isimsembol}**\nSunucu İkinci Sembolü: **${ramal.isimsemboliki}**
\`\`\`Sunucu Yetki Rolleri\`\`\`Ban Hammer Rolü \`(.setup banhammer @Rol/ID)\`  \nJail Hammer Rolü \`(.setup jailhammer @Rol/ID)\` \nMute Hammer Rolü \`(.setup mutehammer @Rol/ID)\`  \nVoice Mute Hammer Rolü \`(.setup vmutehammer @Rol/ID)\`  \nClown Hammer Rolü \`(.setup clownhammer @Rol/ID)\` \nMove Hammer Rolü \`(.setup movehammer @Rol/ID)\`\nRegister Hammer Rolü \`(.setup registerhammer @Rol/ID)\` \n\`\`\`Sunucu İçi Rol Ayarları\`\`\`Kayıtsız Rolü \`(.setup kayıtsızrol @Rol/ID)\` \nErkek Rolleri \`(.setup erkekrol @Rol/ID)\` \nKadın Rolleri \`(.setup kadınrol @Rol/ID)\` \nYönetim Rolleri \`(.setup yonetimrolleri @Rol/ID)\` \nTaglı Rolü \`(.setup tagrol @Rol/ID)\` \nMuted Rolü \`(.setup muterol @Rol/ID)\` \nV Muted Rolü \`(.setup vmuterol @Rol/ID)\`\nCezalı Rolü \`(.setup cezalı @Rol/ID)\`\nBooster Rolü \`(.setup boosterrol @Rol/ID)\`\nEtkinlik Rolü \`(.setup etkinlikrol @Rol/ID)\` \nÇekiliş Rolü \`(.setup cekilisrol @Rol/ID)\`\nVip Rolü \`(.setup viprol @Rol/ID)\`
\`\`\`Sunucu İçi Log Kanal Kurulumları\`\`\`Guard Log \`(.setup guardlog #Kanal/ID)\`\nBan Log \`(.setup banlog #Kanal/ID)\`\nJail Log \`(.setup jaillog #Kanal/ID)\`\nMute Log \`(.setup mutelog #Kanal/ID)\`\nTag Log \`(.setup taglog #Kanal/ID)\` \nDenetim Log \`(.setup denetimlog #Kanal/ID)\`\nMesaj Log \`(.setup mesajlog #Kanal/ID)\` \nSes Log \`(.setup seslog #Kanal/ID)\` \nInvite Log \`(.setup invitelog #Kanal/ID)\` \nRol Log \`(.setup rollog #Kanal/ID)\`\nGünlük Görev Log \`(.setup günlükgörevlog #Kanal/ID)\`
\`\`\`Sunucu İçi Kanal Kurulumları\`\`\`Bot Ses Kanalı \`(.setup botses #Kanal/ID)\` \nKomut Kanalları \`(.setup komutkanal #Kanal/ID)\` \nGenel Sohbet \`(.setup genelsohbet #Kanal/ID)\`\nTeyit Kanalı \`(.setup teyitkanali #Kanal/ID)\`\nEC Rol Alma Kanalı \`(.setup ecrolalma #Kanal/ID)\`\nKullanıcı Panel Kanalı \`(.setup kullanicipanel #Kanal/ID)\`\nPublic Kategori \`(.setup publickategori #ID)\``
                )]
        })

        kurulum.awaitMessageComponent({ filter: (component) => component.user.id === message.author.id, componentType: 'SELECT_MENU', }).then(async (interaction) => {
            if (interaction.customId == "select") {
                let banhammer = ramal.banHammer ? `<@&${ramal.banHammer}>` : `${emojis.iptal}`;
                let jailhammer = ramal.jailHammer ? `<@&${ramal.jailHammer}>` : `${emojis.iptal}`;
                let mutehammer = ramal.muteHammer ? `<@&${ramal.muteHammer}>` : `${emojis.iptal}`;
                let vmutehammer = ramal.vmuteHammer ? `<@&${ramal.vmuteHammer}>` : `${emojis.iptal}`;
                let clownhammer = ramal.clownHammer ? `<@&${ramal.clownHammer}>` : `${emojis.iptal}`;
                let movehammer = ramal.moveHammer ? `<@&${ramal.moveHammer}>` : `${emojis.iptal}`;
                let registerhammer = ramal.registerHammer ? `<@&${ramal.registerHammer}>` : `${emojis.iptal}`;
                let vipRol = ramal.vipRole ? `<@&${ramal.vipRole}>` : `${emojis.iptal}`;
                let erkekrol = ramal.manRoles ? `${ramal.manRoles.length > 1 ? ramal.manRoles.slice(0, -1).map(x => `<@&${x}>`).join(", ") + " ve " + ramal.manRoles.map(x => `<@&${x}>`).slice(-1) : ramal.manRoles.map(x => `<@&${x}>`).join("")}` : `${emojis.iptal}`;
                let kadınrol = ramal.womanRoles ? `${ramal.womanRoles.length > 1 ? ramal.womanRoles.slice(0, -1).map(x => `<@&${x}>`).join(", ") + " ve " + ramal.womanRoles.map(x => `<@&${x}>`).slice(-1) : ramal.womanRoles.map(x => `<@&${x}>`).join("")}` : `${emojis.iptal}`;
                let yonetimRoles = ramal.yonetimRoles ? `${ramal.yonetimRoles.length > 1 ? ramal.yonetimRoles.slice(0, -1).map(x => `<@&${x}>`).join(", ") + " ve " + ramal.yonetimRoles.map(x => `<@&${x}>`).slice(-1) : ramal.yonetimRoles.map(x => `<@&${x}>`).join("")}` : `${emojis.iptal}`;
                let kayitsizrol = ramal.unregisterRole ? `<@&${ramal.unregisterRole}>` : `${emojis.iptal}`; let tagrol = ramal.tagRol ? `<@&${ramal.tagRol}>` : `${emojis.iptal}`; let mutedrol = ramal.mutedRole ? `<@&${ramal.mutedRole}>` : `${emojis.iptal}`;
                let vmutedrol = ramal.vmutedRole ? `<@&${ramal.vmutedRole}>` : `${emojis.iptal}`;
                let cezalıRol = ramal.jailedRole ? `<@&${ramal.jailedRole}>` : `${emojis.iptal}`;
                let boosterRol = ramal.boosterRole ? `<@&${ramal.boosterRole}>` : `${emojis.iptal}`;
                let cekilisrol = ramal.cekilisRole ? `<@&${ramal.cekilisRole}>` : `${emojis.iptal}`;
                let etkinlikrol = ramal.etkinlikRole ? `<@&${ramal.etkinlikRole}>` : `${emojis.iptal}`;

                let banlog = ramal.banLog ? `<#${ramal.banLog}>` : `${emojis.iptal}`;
                let jaillog = ramal.jailLog ? `<#${ramal.jailLog}>` : `${emojis.iptal}`;
                let mutelog = ramal.muteLog ? `<#${ramal.muteLog}>` : `${emojis.iptal}`;
                let taglog = ramal.tagLog ? `<#${ramal.tagLog}>` : `${emojis.iptal}`;
                let denetimlog = ramal.denetimLog ? `<#${ramal.denetimLog}>` : `${emojis.iptal}`;
                let mesajlog = ramal.messageLog ? `<#${ramal.messageLog}>` : `${emojis.iptal}`;
                let seslog = ramal.voiceLog ? `<#${ramal.voiceLog}>` : `${emojis.iptal}`;
                let botses = ramal.botVoiceChannel ? `<#${ramal.botVoiceChannel}>` : `${emojis.iptal}`;
                let komutkanal = ramal.commandsChannel ? `${ramal.commandsChannel.length > 1 ? ramal.commandsChannel.slice(0, -1).map(x => `<#${x}>`).join(", ") + " ve " + ramal.commandsChannel.map(x => `<#${x}>`).slice(-1) : ramal.commandsChannel.map(x => `<#${x}>`).join("")}` : `${emojis.iptal}`;
                let genelsohbet = ramal.genelChat ? `<#${ramal.genelChat}>` : `${emojis.iptal}`;
                let giriskanal = ramal.welcomeChannel ? `<#${ramal.welcomeChannel}>` : `${emojis.iptal}`;
                let invitelog = ramal.inviteLog ? `<#${ramal.inviteLog}>` : `${emojis.iptal}`;
                let rolLog = ramal.rolLog ? `<#${ramal.rolLog}>` : `${emojis.iptal}`;
                let ecrolalma = ramal.ecChannel ? `<#${ramal.ecChannel}>` : `${emojis.iptal}`;
                let kpanel = ramal.kullaniciPanelChannel ? `<#${ramal.kullaniciPanelChannel}` : `${emojis.iptal}`;
                let guardLog = ramal.guardLog ? `<#${ramal.guardLog}>` : `${emojis.iptal}`;
                let gunlukGorev = ramal.dailyMissionLog ? `<#${ramal.dailyMissionLog}>` : `${emojis.iptal}`

                let publicParent = ramal.publicParents ? `<#${ramal.publicParents}>` : `${emojis.iptal}`;


                if (kurulum) kurulum.delete(); await interaction.channel.send({
                    embeds: [embed.setDescription(`\`\`\`Sunucu Bilgileri\`\`\`Sunucu ID: **${message.guild.id}**\nSunucu İsim: **${message.guild.name}**\nSunucu Tag :**${ramal.tags ? ramal.tags.map(t => `${t}`).join(',') : `${emojis.iptal}`}**\nSunucu Sembolü: **${ramal.isimsembol}**\nSunucu İkinci Sembolü: **${ramal.isimsemboliki}**
\`\`\`Sunucu Yetki Rolleri\`\`\`Ban Hammer Rolü (${banhammer})\nJail Hammer Rolü (${jailhammer})\nMute Hammer Rolü (${mutehammer})\nVoice Mute Hammer Rolü (${vmutehammer})\nClown Hammer Rolü (${clownhammer})\nMove Hammer Rolü (${movehammer})\nRegister Hammer Rolü (${registerhammer})\n\`\`\`Sunucu İçi Rol Ayarları\`\`\`Kayıtsız Rolü (${kayitsizrol})\nErkek Rolleri (${erkekrol})\nKadın Rolleri (${kadınrol})\nYönetim Rolleri (${yonetimRoles})\nTaglı Rolü (${tagrol})\nMuted Rolü (${mutedrol}\nV Muted Rolü (${vmutedrol})\nCezalı Rolü (${cezalıRol})\nBooster Rolü (${boosterRol})\nEtkinlik Rolü (${etkinlikrol})\nÇekiliş Rolü (${cekilisrol})\nVip Rolü (${vipRol})
\`\`\`Sunucu İçi Log Kanal Kurulumları\`\`\`Guard Log (${guardLog})\nBan Log (${banlog})\nJail Log (${jaillog})\nMute Log (${mutelog})\nTag Log (${taglog})\nDenetim Log (${denetimlog})\nMesaj Log (${mesajlog})\nSes Log (${seslog})\nInvite Log (${invitelog})\nRol Log (${rolLog})\nGünlük Görev Log (${gunlukGorev})
\`\`\`Sunucu İçi Kanal Kurulumları\`\`\`Guard Log Kanalı (${guardLog})\nBot Ses Kanalı (${botses})\nKomut Kanalı (${komutkanal})\nGenel Sohbet (${genelsohbet})\nTeyit Kanalı (${giriskanal})\nEC Rol Alma Kanalı (${ecrolalma})\nKullanıcı Panel Kanalı (${kpanel})\nPublic Kategori (${publicParent})`
                    )]
                })
            }
        })
    }
        //ROL ALMA AYARLARI
        if (args[0] === "banhammer" || args[0] === "banHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { banHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Ban Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "jailhammer" || args[0] === "jailHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Jail Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "mutehammer" || args[0] === "muteHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { muteHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Mute Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "vmutehammer" || args[0] === "vmuteHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { vmuteHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Voice-Mute Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "clownhammer" || args[0] === "clownHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { clownHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Clown Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "movehammer" || args[0] === "moveHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { moveHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Move Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "registerhammer" || args[0] === "registerHammer") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { registerHammer: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Register Hammer\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "kayıtsızrol" || args[0] === "unregister") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { unregisterRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Unregister - Kayıtsız\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "kadınrol") { let roller; if (message.mentions.roles.size >= 1) roller = message.mentions.roles.map(role => role.id); else roller = args.splice(1).filter(role => message.guild.roles.cache.some(role2 => role == role2.id)); if (roller.length <= 0) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { womanRoles: roller } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Kadın\` rolü config dosyasına ${roller.map(role => message.guild.roles.cache.filter(role2 => role == role2.id).map(role => role.toString())).join(", ")} olarak ayarlandı!`) }
        if (args[0] === "erkekrol") { let roller; if (message.mentions.roles.size >= 1) roller = message.mentions.roles.map(role => role.id); else roller = args.splice(1).filter(role => message.guild.roles.cache.some(role2 => role == role2.id)); if (roller.length <= 0) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { manRoles: roller } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Erkek\` rolü config dosyasına ${roller.map(role => message.guild.roles.cache.filter(role2 => role == role2.id).map(role => role.toString())).join(", ")} olarak ayarlandı!`) }
        if (args[0] === "yetimrolleri") { let roller; if (message.mentions.roles.size >= 1) roller = message.mentions.roles.map(role => role.id); else roller = args.splice(1).filter(role => message.guild.roles.cache.some(role2 => role == role2.id)); if (roller.length <= 0) return message.reply(`Bir rol belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { yonetimRoles: roller } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Yönetim Rolleri\` rolü config dosyasına ${roller.map(role => message.guild.roles.cache.filter(role2 => role == role2.id).map(role => role.toString())).join(", ")} olarak ayarlandı!`) }
        if (args[0] === "tagrol" || args[0] === "taglırol") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { tagRol: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Taglı\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "muterol" || args[0] === "muted") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { mutedRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Chat-Muted\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "vmuterol" || args[0] === "vmuted") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { vmutedRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Voice-Muted\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "cezalı" || args[0] === "jailed") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailedRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Ceza\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "boosterrol" || args[0] === "booster") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { boosterRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Booster\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "etkinlikrol" || args[0] === "etkinlikkatılımcısı") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { etkinlikRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Etkinlik Katılımcısı\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "çekilişrol" || args[0] === "cekilisrol") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { cekilisRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Çekiliş Katılımcısı\` rolü config dosyasına ${rol} olarak ayarlandı!`) }
        if (args[0] === "viprol" || args[0] === "vip") { let rol = message.mentions.roles.first() || message.guild.roles.cache.get(args.splice(1)[0]) || message.guild.roles.cache.find(r => r.name === args.splice(1).join('')); if (!rol) return message.reply(`Bir rol belirtmelisin.`).sil(5);; await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { vipRole: rol.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`VIP\` rolü config dosyasına ${rol} olarak ayarlandı!`) }

        //KANAL AYARLARI
        if (args[0] === "banlog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { banLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Ban Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "jaillog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Jail Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "mutelog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { muteLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Mute Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "taglog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { tagLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Tag Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "denetimlog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { denetimLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Denetim Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "mesajlog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { messageLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Mesaj Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "seslog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { voiceLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Ses Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "botses") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { botVoiceChannel: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Bot Ses\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "genelsohbet") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { genelChat: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Genel Chat\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "teyitkanali") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { welcomeChannel: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Welcome Kanalı\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "invitelog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { inviteLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Invite Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "rollog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { rolLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Rol Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "guardlog") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { guardLog: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Guard Log\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "ecrolalma") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { ecChannel: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`EC Rol Alma\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "kullanicipanel") { let channel = message.guild.channels.cache.get(args.splice(1)[0]) || message.mentions.channels.first(); if (!channel) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { kullaniciPanelChannel: channel.id } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Kullanıcı Panel\` kanalı config dosyasına ${channel} olarak ayarlandı!`) }
        if (args[0] === "komutkanal") { let kanallar; if (message.mentions.channels.size >= 1) kanallar = message.mentions.channels.map(kanal => kanal.id); else kanallar = args.splice(1).filter(kanal => message.guild.channels.cache.some(kanal2 => kanal == kanal2.id)); if (kanallar.length <= 0) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { commandsChannel: kanallar } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Komut\` kanalı config dosyasına ${kanallar.map(kanal => message.guild.channels.cache.filter(kanal2 => kanal == kanal2.id).map(kanal => kanal.toString())).join(", ")} olarak ayarlandı!`) }

        if (args[0] === "publicparent" || args[0] === "publickategori") { let kanallar; if (message.mentions.channels.size >= 1) kanallar = message.mentions.channels.map(kanal => kanal.id); else kanallar = args.splice(1).filter(kanal => message.guild.channels.cache.some(kanal2 => kanal == kanal2.id)); if (kanallar.length <= 0) return message.reply(`Bir kanal belirtmelisin.`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { publicParents: kanallar } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Public\` kategorileri config dosyasına ${kanallar.map(kanal => message.guild.channels.cache.filter(kanal2 => kanal == kanal2.id).map(kanal => kanal.toString())).join(", ")} olarak ayarlandı!`) }

        if (args[0] === "tag") { let metin = args.splice(1).join(" "); if (!metin) return message.reply(`Bir tag belirtmeyi unuttun!`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { tags: metin } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Tag\` config dosyasına **${metin}** olarak ayarlandı!`)}
        if (args[0] === "etiket") { let metin = args.splice(1).join(" "); if (!metin) return message.reply(`Bir etiket belirtmeyi unuttun!`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { etiket: metin } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Tag\` config dosyasına **${metin}** olarak ayarlandı!`)}
        if (args[0] === "sembol") { let metin = args.splice(1).join(" "); if (!metin) return message.reply(`Bir tag belirtmeyi unuttun!`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { isimsembol: metin } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`Tag\` config dosyasına **${metin}** olarak ayarlandı!`)}
        if (args[0] === "ikincisembol") { let metin = args.splice(1).join(" "); if (!metin) return message.reply(`Bir tag belirtmeyi unuttun!`).sil(5); await Ramalcim.findOneAndUpdate({ guildID: config.guildID }, { $set: { isimsemboliki: metin } }, { upsert: true }).exec(); message.reply(`${emojis.onay} Başarılı bir şekilde \`İkinci Tag\` config dosyasına **${metin}** olarak ayarlandı!`)}
        
    }
};



module.exports = Setup
